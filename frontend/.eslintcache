[{"/Users/mattbrown/projects/charShop/frontend/src/App.js":"1","/Users/mattbrown/projects/charShop/frontend/src/components/Header.js":"2","/Users/mattbrown/projects/charShop/frontend/src/index.js":"3","/Users/mattbrown/projects/charShop/frontend/src/components/Footer.js":"4","/Users/mattbrown/projects/charShop/frontend/src/screens/HomeScreen.js":"5","/Users/mattbrown/projects/charShop/frontend/src/components/Product.js":"6","/Users/mattbrown/projects/charShop/frontend/src/reportWebVitals.js":"7","/Users/mattbrown/projects/charShop/frontend/src/components/Rating.js":"8","/Users/mattbrown/projects/charShop/frontend/src/screens/ProductScreen.js":"9","/Users/mattbrown/projects/charShop/frontend/src/store.js":"10","/Users/mattbrown/projects/charShop/frontend/src/reducers/productReducers.js":"11","/Users/mattbrown/projects/charShop/frontend/src/constants/productConstants.js":"12","/Users/mattbrown/projects/charShop/frontend/src/actions/productActions.js":"13","/Users/mattbrown/projects/charShop/frontend/src/components/Loader.js":"14","/Users/mattbrown/projects/charShop/frontend/src/components/Message.js":"15","/Users/mattbrown/projects/charShop/frontend/src/screens/CartScreen.js":"16","/Users/mattbrown/projects/charShop/frontend/src/reducers/cartReducers.js":"17","/Users/mattbrown/projects/charShop/frontend/src/constants/cartConstants.js":"18","/Users/mattbrown/projects/charShop/frontend/src/actions/cartActions.js":"19","/Users/mattbrown/projects/charShop/frontend/src/reducers/userReducers.js":"20","/Users/mattbrown/projects/charShop/frontend/src/constants/userConstants.js":"21","/Users/mattbrown/projects/charShop/frontend/src/screens/LoginScreen.js":"22","/Users/mattbrown/projects/charShop/frontend/src/components/FormContainer.js":"23","/Users/mattbrown/projects/charShop/frontend/src/actions/userActions.js":"24","/Users/mattbrown/projects/charShop/frontend/src/screens/RegisterScreen.js":"25","/Users/mattbrown/projects/charShop/frontend/src/screens/ProfileScreen.js":"26","/Users/mattbrown/projects/charShop/frontend/src/screens/ShippingScreen.js":"27","/Users/mattbrown/projects/charShop/frontend/src/components/CheckoutSteps.js":"28","/Users/mattbrown/projects/charShop/frontend/src/screens/PaymentScreen.js":"29","/Users/mattbrown/projects/charShop/frontend/src/screens/PlaceOrderScreen.js":"30","/Users/mattbrown/projects/charShop/frontend/src/reducers/orderReducers.js":"31","/Users/mattbrown/projects/charShop/frontend/src/constants/orderConstants.js":"32","/Users/mattbrown/projects/charShop/frontend/src/actions/orderAction.js":"33","/Users/mattbrown/projects/charShop/frontend/src/screens/OrderScreen.js":"34","/Users/mattbrown/projects/charShop/frontend/src/screens/UserListScreen.js":"35","/Users/mattbrown/projects/charShop/frontend/src/screens/UserEditScreen.js":"36"},{"size":1800,"mtime":1610817012204,"results":"37","hashOfConfig":"38"},{"size":2470,"mtime":1610742926725,"results":"39","hashOfConfig":"38"},{"size":597,"mtime":1610472989463,"results":"40","hashOfConfig":"38"},{"size":315,"mtime":1610233223460,"results":"41","hashOfConfig":"38"},{"size":1130,"mtime":1610479107833,"results":"42","hashOfConfig":"38"},{"size":1007,"mtime":1610587517010,"results":"43","hashOfConfig":"38"},{"size":362,"mtime":1610231593625,"results":"44","hashOfConfig":"38"},{"size":1776,"mtime":1610315780340,"results":"45","hashOfConfig":"38"},{"size":3731,"mtime":1610587592175,"results":"46","hashOfConfig":"38"},{"size":1813,"mtime":1610812869641,"results":"47","hashOfConfig":"38"},{"size":1003,"mtime":1610479402609,"results":"48","hashOfConfig":"38"},{"size":367,"mtime":1610479264067,"results":"49","hashOfConfig":"38"},{"size":1139,"mtime":1610479530670,"results":"50","hashOfConfig":"38"},{"size":386,"mtime":1610478907114,"results":"51","hashOfConfig":"38"},{"size":243,"mtime":1610479022668,"results":"52","hashOfConfig":"38"},{"size":3581,"mtime":1610498048196,"results":"53","hashOfConfig":"38"},{"size":1261,"mtime":1610814746394,"results":"54","hashOfConfig":"38"},{"size":282,"mtime":1610814735763,"results":"55","hashOfConfig":"38"},{"size":1267,"mtime":1610643535526,"results":"56","hashOfConfig":"38"},{"size":2887,"mtime":1610817354356,"results":"57","hashOfConfig":"38"},{"size":1279,"mtime":1610812752557,"results":"58","hashOfConfig":"38"},{"size":2162,"mtime":1610568971814,"results":"59","hashOfConfig":"38"},{"size":336,"mtime":1610568037107,"results":"60","hashOfConfig":"38"},{"size":5254,"mtime":1610817436933,"results":"61","hashOfConfig":"38"},{"size":3136,"mtime":1610570328835,"results":"62","hashOfConfig":"38"},{"size":5398,"mtime":1610731497008,"results":"63","hashOfConfig":"38"},{"size":2800,"mtime":1610586585003,"results":"64","hashOfConfig":"38"},{"size":1249,"mtime":1610586575581,"results":"65","hashOfConfig":"38"},{"size":1642,"mtime":1610643633365,"results":"66","hashOfConfig":"38"},{"size":4965,"mtime":1610655797560,"results":"67","hashOfConfig":"38"},{"size":2047,"mtime":1610731666230,"results":"68","hashOfConfig":"38"},{"size":801,"mtime":1610731601141,"results":"69","hashOfConfig":"38"},{"size":3244,"mtime":1610731323394,"results":"70","hashOfConfig":"38"},{"size":7125,"mtime":1610729343257,"results":"71","hashOfConfig":"38"},{"size":2792,"mtime":1610815838809,"results":"72","hashOfConfig":"38"},{"size":2607,"mtime":1610817374277,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"913lds",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mattbrown/projects/charShop/frontend/src/App.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/Header.js",[],["154","155"],"/Users/mattbrown/projects/charShop/frontend/src/index.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/Footer.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/HomeScreen.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/Product.js",[],"/Users/mattbrown/projects/charShop/frontend/src/reportWebVitals.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/Rating.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/ProductScreen.js",["156"],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  Image,\n  ListGroup,\n  Card,\n  Button,\n  Form,\n} from \"react-bootstrap\";\nimport Rating from \"../components/Rating\";\nimport { listProductDetails } from \"../actions/productActions\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\n\nconst ProductScreen = ({ history, match }) => {\n  const [quantity, setQuantity] = useState(1);\n  const productDetails = useSelector((state) => state.productDetails);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(listProductDetails(match.params.id));\n  }, [match, dispatch]);\n\n  const addToCartHandler = () => {\n    history.push(`/cart/${match.params.id}?qty=${quantity}`);\n  };\n\n  const { loading, error, product } = productDetails;\n  return (\n    <>\n      <Link className=\"btn btn-light my-3\" to=\"/\">\n        Go Back\n      </Link>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Row>\n          <Col md={6}>\n            {/* fluid keeps image inside container */}\n            <Image src={product.image} alt={product.name} fluid />\n          </Col>\n          <Col md={3}>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <h3>{product.name}</h3>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Rating\n                  value={product.rating}\n                  text={`${product.numReviews} reviews`}\n                />\n              </ListGroup.Item>\n              <ListGroup.Item>Price: ${product.price}</ListGroup.Item>\n              <ListGroup.Item>\n                Description: {product.description}\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n          <Col md={3}>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <Row>\n                  <Col>Price:</Col>\n                  <Col>\n                    <strong>${product.price}</strong>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Status:</Col>\n                  <Col>\n                    <strong>\n                      {product.countInStock > 0 ? \"In Stock\" : \"Out of Stock\"}\n                    </strong>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n\n              {product.countInStock > 0 && (\n                <ListGroup.Item>\n                  <Row>\n                    <Col>Qty</Col>\n                    <Col>\n                      <Form.Control\n                        as=\"select\"\n                        value={quantity}\n                        onChange={(e) => setQuantity(e.target.value)}\n                      >\n                        {[...Array(product.countInStock).keys()].map((x) => (\n                          <option key={x + 1} value={x + 1}>\n                            {x + 1}\n                          </option>\n                        ))}\n                      </Form.Control>\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n              )}\n              <ListGroup.Item>\n                <Button\n                  onClick={addToCartHandler}\n                  className=\"btn-block\"\n                  type=\"button\"\n                  disabled={product.countInStock === 0}\n                >\n                  Add To Cart\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Col>\n        </Row>\n      )}\n    </>\n  );\n};\n\nexport default ProductScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/store.js",[],"/Users/mattbrown/projects/charShop/frontend/src/reducers/productReducers.js",[],"/Users/mattbrown/projects/charShop/frontend/src/constants/productConstants.js",[],"/Users/mattbrown/projects/charShop/frontend/src/actions/productActions.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/Loader.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/Message.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/CartScreen.js",["157","158"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Row,\n  Col,\n  ListGroup,\n  Image,\n  Form,\n  Button,\n  Card,\n} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport { addToCart, removeFromCart } from \"../actions/cartActions\";\n\nconst CartScreen = ({ match, location, history }) => {\n  const productId = match.params.id;\n  const qty = location.search ? Number(location.search.split(\"=\")[1]) : 1;\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n  const { cartItems } = cart;\n  useEffect(() => {\n    if (productId) {\n      dispatch(addToCart(productId, qty));\n    }\n  }, [dispatch, productId, qty]);\n\n  const removeFromCartHandler = (id) => {\n    dispatch(removeFromCart(id));\n    console.log(\"remove\");\n  };\n\n  const checkoutHandler = () => {\n    history.push(\"/login?redirect=shipping\");\n  };\n  return (\n    <Row>\n      <Col md={8}>\n        <h1>Shopping Cart</h1>\n        {cartItems.length === 0 ? (\n          <Message>\n            Your cart is empty <Link to=\"/\">Go Back</Link>\n          </Message>\n        ) : (\n          <ListGroup variant=\"flush\">\n            {cartItems.map((item) => (\n              <ListGroup.Item key={item.product}>\n                <Row>\n                  <Col md={2}>\n                    <Image src={item.image} alt={item.name} fluid rounded />\n                  </Col>\n                  <Col md={3}>\n                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                  </Col>\n                  <Col md={2}>${item.price}</Col>\n                  <Col md={2}>\n                    {\" \"}\n                    <Form.Control\n                      as=\"select\"\n                      value={item.qty}\n                      onChange={(e) => {\n                        dispatch(\n                          addToCart(item.product, Number(e.target.value))\n                        );\n                        history.push(\"/cart\");\n                      }}\n                    >\n                      {[...Array(item.countInStock).keys()].map((x) => (\n                        <option key={x + 1} value={x + 1}>\n                          {x + 1}\n                        </option>\n                      ))}\n                    </Form.Control>\n                  </Col>\n                  <Col md={2}>\n                    <Button\n                      type=\"button\"\n                      variant=\"light\"\n                      onClick={() => removeFromCartHandler(item.product)}\n                    >\n                      <i className=\"fas fa-trash\"> </i>\n                    </Button>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </Col>\n      <Col md={4}>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>\n            <h2>\n              Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\n              Items\n            </h2>\n            $\n            {cartItems\n              .reduce((acc, item) => acc + item.qty * item.price, 0)\n              .toFixed(2)}\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <Button\n              type=\"button\"\n              className=\"btn-block\"\n              disabled={cartItems.length === 0}\n              onClick={checkoutHandler}\n            >\n              Proceed to Checkout\n            </Button>\n          </ListGroup.Item>\n        </ListGroup>\n      </Col>\n    </Row>\n  );\n};\n\nexport default CartScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/reducers/cartReducers.js",[],"/Users/mattbrown/projects/charShop/frontend/src/constants/cartConstants.js",[],"/Users/mattbrown/projects/charShop/frontend/src/actions/cartActions.js",[],"/Users/mattbrown/projects/charShop/frontend/src/reducers/userReducers.js",[],"/Users/mattbrown/projects/charShop/frontend/src/constants/userConstants.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/LoginScreen.js",[],"/Users/mattbrown/projects/charShop/frontend/src/components/FormContainer.js",[],"/Users/mattbrown/projects/charShop/frontend/src/actions/userActions.js",["159"],"/Users/mattbrown/projects/charShop/frontend/src/screens/RegisterScreen.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/ProfileScreen.js",["160"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Form, Button, Row, Col, Table } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\nimport { listMyOrders } from \"../actions/orderAction\";\n\nconst ProfileScreen = ({ location, history }) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const { loading, error, user } = userDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\n  const { success } = userUpdateProfile;\n\n  const orderListMy = useSelector((state) => state.orderListMy);\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else {\n      if (!user.name) {\n        dispatch(getUserDetails(\"profile\"));\n        dispatch(listMyOrders());\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [history, userInfo, user, dispatch]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match\");\n    } else {\n      dispatch(updateUserProfile({ id: user._id, name, email, password }));\n    }\n  };\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n        {message && <Message variant=\"danger\">{message}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {success && <Message variant=\"success\">Profile Updated</Message>}\n        {loading && <Loader />}\n\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type=\"name\"\n              placeholder=\"Enter Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"email\">\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"password\">\n            <Form.Label>New Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"confirmPassword\">\n            <Form.Label>Confirm New Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Button type=\"submit\" variant=\"primary\">\n            Update\n          </Button>\n        </Form>\n      </Col>\n      <Col md={9}>\n        <h2>My Orders</h2>\n        {loadingOrders ? (\n          <Loader />\n        ) : errorOrders ? (\n          <Message variant=\"danger\">{errorOrders}</Message>\n        ) : (\n          <Table striped bordered hover responsive className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>DATE</th>\n                <th>TOTAL</th>\n                <th>PAID</th>\n                <th>DELIVERED</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>${order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt.substring(0, 10)\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }}></i>\n                    )}\n                  </td>\n                  <td>\n                    {order.isDelivered ? (\n                      order.deliveredAt.substring(0, 10)\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }}></i>\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button variant=\"light\" className=\"btn-sm\">\n                        Details\n                      </Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default ProfileScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/screens/ShippingScreen.js",["161","162","163","164"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport FormContainer from \"../components/FormContainer\";\nimport { saveShippingAddress } from \"../actions/cartActions\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nconst ShippingScreen = ({ history }) => {\n  const cart = useSelector((state) => state.cart);\n  console.log({ cart });\n  const { shippingAddress } = cart;\n  const [address, setAddress] = useState(\n    shippingAddress ? shippingAddress.address : \"\"\n  );\n  const [city, setCity] = useState(shippingAddress ? shippingAddress.city : \"\");\n  const [postalCode, setPostalCode] = useState(\n    shippingAddress ? shippingAddress.postalCode : \"\"\n  );\n  const [country, setCountry] = useState(\n    shippingAddress ? shippingAddress.country : \"\"\n  );\n  const dispatch = useDispatch();\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(saveShippingAddress({ address, city, postalCode, country }));\n    history.push(\"/payment\");\n  };\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 />\n      <h1>Shipping</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"address\">\n          <Form.Label>Address</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Address\"\n            value={address}\n            required\n            onChange={(e) => setAddress(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"city\">\n          <Form.Label>City</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter City\"\n            value={city}\n            required\n            onChange={(e) => setCity(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"postalCode\">\n          <Form.Label>Postal Code</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Postal Code\"\n            value={postalCode}\n            required\n            onChange={(e) => setPostalCode(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Form.Group controlId=\"country\">\n          <Form.Label>Country</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter Country\"\n            value={country}\n            required\n            onChange={(e) => setCountry(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n        <Button type=\"submit\" variant=\"primary\">\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ShippingScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/components/CheckoutSteps.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/PaymentScreen.js",["165","166"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import Message from \"../components/Message\";\n// import Loader from \"../components/Loader\";\nimport FormContainer from \"../components/FormContainer\";\nimport { savePaymentMethod } from \"../actions/cartActions\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\n\nconst PaymentScreen = ({ history }) => {\n  const cart = useSelector((state) => state.cart);\n\n  const { shippingAddress } = cart;\n\n  if (!shippingAddress) {\n    history.push(\"/shipping\");\n  }\n  const [paymentMethod, setPaymentMethod] = useState(\"PayPal\");\n\n  const dispatch = useDispatch();\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(savePaymentMethod(paymentMethod));\n    history.push(\"/placeorder\");\n  };\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 step3 />\n      <h1>Payment Method</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group>\n          <Form.Label as=\"legend\">Select Method</Form.Label>\n\n          <Col>\n            <Form.Check\n              type=\"radio\"\n              label=\"PayPal or Credit Card\"\n              id=\"PayPal\"\n              name=\"paymentMethod\"\n              value=\"PayPal\"\n              checked\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            ></Form.Check>\n          </Col>\n        </Form.Group>\n        <Button type=\"submit\" variant=\"primary\">\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default PaymentScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/screens/PlaceOrderScreen.js",["167","168","169"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\n\n// import { savePaymentMethod } from \"../actions/cartActions\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport { createOrder } from \"../actions/orderAction\";\n\nconst PlaceOrderScreen = ({ history }) => {\n  const dispatch = useDispatch();\n  const cart = useSelector((state) => state.cart);\n\n  const addDecimals = (num) => {\n    return (Math.round(num * 100) / 100).toFixed(2);\n  };\n\n  // Calculate Prices\n  cart.itemsPrice = addDecimals(\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  );\n\n  // ask Charlotte\n  cart.shippingPrice = addDecimals(cart.cartItems.length * 4.5);\n\n  cart.taxPrice = addDecimals(Number((0.15 * cart.itemsPrice).toFixed(2)));\n\n  cart.totalPrice = addDecimals(\n    Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)\n  );\n\n  const orderCreate = useSelector((state) => state.orderCreate);\n  const { order, success, error } = orderCreate;\n\n  useEffect(() => {\n    if (success) {\n      history.push(`/order/${order._id}`);\n    }\n  }, [success, history]);\n  const placeOrderHandler = (e) => {\n    console.log(\"order\");\n    dispatch(\n      createOrder({\n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice,\n      })\n    );\n  };\n  return (\n    <>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Address:</strong> {cart.shippingAddress.address},{\" \"}\n                {cart.shippingAddress.city}, {cart.shippingAddress.postalCode},{\" \"}\n                {cart.shippingAddress.country}\n              </p>\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              {/* may add paymentMethod to localStorage */}\n              <strong>Method: </strong> {cart.paymentMethod}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message>Your cart is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x ${item.price} = ${item.qty * item.price}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Col>Items</Col>\n                <Col>${cart.itemsPrice}</Col>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Col>Shipping</Col>\n                <Col>${cart.shippingPrice}</Col>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Col>Tax</Col>\n                <Col>${cart.taxPrice}</Col>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Col>Total</Col>\n                <Col>${cart.totalPrice}</Col>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                {error && <Message variant=\"danger\">{error}</Message>}\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Button\n                  type=\"button\"\n                  className=\"btn-block\"\n                  disabled={cart.cartItems === 0}\n                  onClick={placeOrderHandler}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PlaceOrderScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/reducers/orderReducers.js",[],"/Users/mattbrown/projects/charShop/frontend/src/constants/orderConstants.js",[],"/Users/mattbrown/projects/charShop/frontend/src/actions/orderAction.js",[],"/Users/mattbrown/projects/charShop/frontend/src/screens/OrderScreen.js",["170","171"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport axios from \"axios\";\nimport { Button, Col, Row, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\n\n// import { savePaymentMethod } from \"../actions/cartActions\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport { getOrderDetails, payOrder } from \"../actions/orderAction\";\nimport { ORDER_PAY_RESET } from \"../constants/orderConstants\";\n\nconst OrderScreen = ({ match }) => {\n  const orderId = match.params.id;\n  const dispatch = useDispatch();\n  const [sdkReady, setSdkReady] = useState(false);\n\n  const orderDetails = useSelector((state) => state.orderDetails);\n  const { order, loading, error } = orderDetails;\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { loading: loadingPay, success: successPay } = orderPay;\n\n  if (!loading && order) {\n    const addDecimals = (num) => {\n      return (Math.round(num * 100) / 100).toFixed(2);\n    };\n\n    // Calculate Prices\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    );\n  }\n\n  useEffect(() => {\n    // if (!userInfo) {\n    //   history.push('/login')\n    // }\n\n    const addPayPalScript = async () => {\n      const { data: clientId } = await axios.get(\"/api/config/paypal\");\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n      script.async = true;\n      script.onload = () => {\n        setSdkReady(true);\n      };\n      document.body.appendChild(script);\n    };\n\n    if (!order || successPay || order._id !== orderId) {\n      dispatch({ type: ORDER_PAY_RESET });\n      // dispatch({ type: ORDER_DELIVER_RESET });\n      dispatch(getOrderDetails(orderId));\n    } else if (!order.isPaid) {\n      if (!window.paypal) {\n        addPayPalScript();\n      } else {\n        setSdkReady(true);\n      }\n    }\n  }, [dispatch, orderId, successPay, order]);\n\n  const successPaymentHandler = (paymentResult) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <>\n          <h1>Order {order._id}</h1>{\" \"}\n          <Row>\n            <Col md={8}>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <h2>Shipping</h2>\n                  <p>\n                    {\" \"}\n                    <strong>Name: </strong>\n                    {order.user.name}\n                  </p>\n                  <p>\n                    {\" \"}\n                    <strong>Email: </strong>{\" \"}\n                    <a href={`mailto:${order.user.email}`}>\n                      {order.user.email}\n                    </a>\n                  </p>\n\n                  <p>\n                    <strong>Address:</strong> {order.shippingAddress.address},{\" \"}\n                    {order.shippingAddress.city},{\" \"}\n                    {order.shippingAddress.postalCode},{\" \"}\n                    {order.shippingAddress.country}\n                  </p>\n                  {/* currently stored as delivered not shipped */}\n                  {order.isDelivered ? (\n                    <Message variant=\"success\">\n                      Shipped on {order.deliveredAt}\n                    </Message>\n                  ) : (\n                    <Message variant=\"danger\">Not shipped</Message>\n                  )}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <p>\n                    {\" \"}\n                    <h2>Payment Method</h2>\n                    {/* may add paymentMethod to localStorage */}\n                    <strong>Method: </strong> {order.paymentMethod}\n                  </p>\n                  {order.isPaid ? (\n                    <Message variant=\"success\">Paid on {order.paidAt}</Message>\n                  ) : (\n                    <Message variant=\"danger\">Not paid</Message>\n                  )}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                  <h2>Order Items</h2>\n                  {order.orderItems.length === 0 ? (\n                    <Message>Order is empty</Message>\n                  ) : (\n                    <ListGroup variant=\"flush\">\n                      {order.orderItems.map((item, index) => (\n                        <ListGroup.Item key={index}>\n                          <Row>\n                            <Col md={1}>\n                              <Image\n                                src={item.image}\n                                alt={item.name}\n                                fluid\n                                rounded\n                              />\n                            </Col>\n                            <Col>\n                              <Link to={`/product/${item.product}`}>\n                                {item.name}\n                              </Link>\n                            </Col>\n                            <Col md={4}>\n                              {item.qty} x ${item.price} = $\n                              {item.qty * item.price}\n                            </Col>\n                          </Row>\n                        </ListGroup.Item>\n                      ))}\n                    </ListGroup>\n                  )}\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n            <Col md={4}>\n              <Card>\n                <ListGroup>\n                  <ListGroup.Item>\n                    <h2>Order Summary</h2>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <Col>Items</Col>\n                    <Col>${order.itemsPrice}</Col>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <Col>Shipping</Col>\n                    <Col>${order.shippingPrice}</Col>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <Col>Tax</Col>\n                    <Col>${order.taxPrice}</Col>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <Col>Total</Col>\n                    <Col>${order.totalPrice}</Col>\n                  </ListGroup.Item>\n                  {!order.isPaid && (\n                    <ListGroup.Item>\n                      {loadingPay && <Loader />}\n                      {!sdkReady ? (\n                        <Loader />\n                      ) : (\n                        <PayPalButton\n                          amount={order.totalPrice}\n                          onSuccess={successPaymentHandler}\n                        />\n                      )}\n                    </ListGroup.Item>\n                  )}\n                </ListGroup>\n              </Card>\n            </Col>\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default OrderScreen;\n","/Users/mattbrown/projects/charShop/frontend/src/screens/UserListScreen.js",["172"],"/Users/mattbrown/projects/charShop/frontend/src/screens/UserEditScreen.js",["173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":9,"column":3,"nodeType":"181","messageId":"182","endLine":9,"endColumn":7},{"ruleId":"179","severity":1,"message":"183","line":1,"column":28,"nodeType":"181","messageId":"182","endLine":1,"endColumn":36},{"ruleId":"179","severity":1,"message":"180","line":11,"column":3,"nodeType":"181","messageId":"182","endLine":11,"endColumn":7},{"ruleId":"179","severity":1,"message":"184","line":233,"column":13,"nodeType":"181","messageId":"182","endLine":233,"endColumn":17},{"ruleId":"179","severity":1,"message":"185","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":14},{"ruleId":"179","severity":1,"message":"186","line":1,"column":27,"nodeType":"181","messageId":"182","endLine":1,"endColumn":36},{"ruleId":"179","severity":1,"message":"185","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":14},{"ruleId":"179","severity":1,"message":"187","line":5,"column":8,"nodeType":"181","messageId":"182","endLine":5,"endColumn":15},{"ruleId":"179","severity":1,"message":"188","line":6,"column":8,"nodeType":"181","messageId":"182","endLine":6,"endColumn":14},{"ruleId":"179","severity":1,"message":"186","line":1,"column":27,"nodeType":"181","messageId":"182","endLine":1,"endColumn":36},{"ruleId":"179","severity":1,"message":"185","line":2,"column":10,"nodeType":"181","messageId":"182","endLine":2,"endColumn":14},{"ruleId":"179","severity":1,"message":"183","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"188","line":6,"column":8,"nodeType":"181","messageId":"182","endLine":6,"endColumn":14},{"ruleId":"189","severity":1,"message":"190","line":41,"column":6,"nodeType":"191","endLine":41,"endColumn":24,"suggestions":"192"},{"ruleId":"179","severity":1,"message":"193","line":5,"column":10,"nodeType":"181","messageId":"182","endLine":5,"endColumn":16},{"ruleId":"179","severity":1,"message":"194","line":11,"column":8,"nodeType":"181","messageId":"182","endLine":11,"endColumn":21},{"ruleId":"179","severity":1,"message":"183","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"195","line":14,"column":10,"nodeType":"181","messageId":"182","endLine":14,"endColumn":18},{"ruleId":"179","severity":1,"message":"196","line":14,"column":20,"nodeType":"181","messageId":"182","endLine":14,"endColumn":31},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'data' is assigned a value but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","'Message' is defined but never used.","'Loader' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.","ArrayExpression",["199"],"'Button' is defined but never used.","'CheckoutSteps' is defined but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},"Update the dependencies array to be: [success, history, order._id]",{"range":"202","text":"203"},[1335,1353],"[success, history, order._id]"]